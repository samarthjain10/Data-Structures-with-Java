public class Solution {

    /*	Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	 */

    public static BinaryTreeNode<Integer> getTreeFromPostorderAndInorder(int[] post,int[] in)
    {
        // Write your code here
        return helper(post,in,0,post.length-1,0,in.length-1);
    }
    public static BinaryTreeNode<Integer> helper(int[] post,int[] in,int postS,int postE,int inS,int inE)
    {
        if(inS>inE)
            return null;
        int rootdata=post[postE];
        BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(rootdata);
        int i=inS;
        while(i<=inE){
            if(in[i]==rootdata)
                break;
            i++;
        }
        int lis=inS;
        int lie=i-1;
        int ris=i+1;
        int rie=inE;

        int lps=postS;
        int rpe=postE-1;
        int ll=lie-lis+1;
        int lpe=lps+ll-1;
        int rps=lpe+1;

        root.left=helper(post,in,lps,lpe,lis,lie);
        root.right=helper(post,in,rps,rpe,ris,rie);
        return root;
    }




}